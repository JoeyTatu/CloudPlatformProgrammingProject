{"changed":true,"filter":false,"title":"s3-create.py","tooltip":"/flaskapp/s3-create.py","value":"# source: https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html\n# some of the code included here is taken or adapted from the Amazon S3 examples available on Boto3 documentation\n\nimport logging\nimport boto3\nfrom botocore.exceptions import ClientError\n\n\ndef create_bucket(bucket_name, region=None):\n    \"\"\"Create an S3 bucket in a specified region\n\n    If a region is not specified, the bucket is created by default in the region (us-east-1).\n\n    :param bucket_name: Bucket to create\n    :param region: String region to create bucket in, e.g., 'us-west-2'\n    :return: True if bucket created, else False\n    \"\"\"\n\n    # Create bucket\n    try:\n        if region is None:\n            s3_client = boto3.client('s3')\n            s3_client.create_bucket(Bucket=bucket_name)\n        else:\n            s3_client = boto3.client('s3', region_name=region)\n            location = {'LocationConstraint': region}\n            s3_client.create_bucket(Bucket=bucket_name,\n                                    CreateBucketConfiguration=location)\n    except ClientError as e:\n        logging.error(e)\n        return False\n    return True\n    \n    \n\ndef list_buckets():\n    # Retrieve the list of existing buckets\n    s3_client = boto3.client('s3')\n    response = s3_client.list_buckets()\n\n    # Output the bucket names\n    print('Existing buckets:')\n    for bucket in response['Buckets']:\n        print('\\t', bucket[\"Name\"])\n    \n    \ndef upload_file(file_name, bucket, object_key=None):\n    \"\"\"Upload a file to an S3 bucket\n\n    :param file_name: File to upload\n    :param bucket: Bucket to upload to\n    :param key: S3 object key. If not specified then file_name is used\n    :return: True if file was uploaded, else False\n    \"\"\"\n\n    # If S3 key was not specified, use file_name\n    if object_key is None:\n        object_key = file_name\n\n    # Upload the file\n    s3_client = boto3.client('s3')\n    try:\n        response = s3_client.upload_file(file_name, bucket, object_key)\n        '''\n        # an example of using the ExtraArgs optional parameter to set the ACL (access control list) value 'public-read' to the S3 object\n        response = s3_client.upload_file(file_name, bucket, key, \n            ExtraArgs={'ACL': 'public-read'})\n        '''\n        \n    except ClientError as e:\n        logging.error(e)\n        return False\n    return True\n    \n    \n    \ndef delete_object(region, bucket_name, object_key):\n    \"\"\"Delete a given object from an S3 bucket\n    \"\"\"\n    s3_client = boto3.client('s3')\n    response = s3_client.delete_object(Bucket=bucket_name, Key=object_key)\n    \n\n\ndef delete_bucket(region, bucket_name):\n    \"\"\"Delete a given S3 bucket\n    \"\"\"\n    s3_client = boto3.client('s3')\n  \n    # first delete all the objects from a bucket, if any objects exist\n    response = s3_client.list_objects_v2(Bucket=bucket_name)\n    if response['KeyCount'] != 0:\n          for content in response['Contents']:\n            object_key = content['Key']\n            print('\\t Deleting object...', object_key)\n            s3_client.delete_object(Bucket=bucket_name, Key=object_key)\n\n\n    # delete the bucket\n    print('\\t Deleting bucket...', bucket_name)\n    response = s3_client.delete_bucket(Bucket=bucket_name)\n  \n    list_buckets()\n  \n\ndef download_file(file_name, bucket):\n    \"\"\"\n    Function to download a given file from an S3 bucket\n    \"\"\"\n    s3 = boto3.resource('s3')\n    output = f\"downloads/{file_name}\"\n    s3.Bucket(bucket).download_file(file_name, output)\n\n    return output\n \n \n    \ndef main():\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument('bucket_name', help='The name of the bucket.')\n    parser.add_argument('--file_name', help='The name of the file to upload.')\n    parser.add_argument('--object_key', help='The object key')\n\n    region = 'us-east-1'\n  \n    args = parser.parse_args()\n    create_bucket(args.bucket_name)\n    #list_buckets()\n    \n    \n    #upload_file(args.file_name,args.bucket_name, args.object_key)\n    #delete_object(region, args.bucket_name, args.object_key)\n    #delete_bucket(region, args.bucket_name)\n \n \n\nif __name__ == '__main__':\n main()","undoManager":{"mark":0,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":129,"column":7},"action":"insert","lines":["# source: https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html","# some of the code included here is taken or adapted from the Amazon S3 examples available on Boto3 documentation","","import logging","import boto3","from botocore.exceptions import ClientError","","","def create_bucket(bucket_name, region=None):","    \"\"\"Create an S3 bucket in a specified region","","    If a region is not specified, the bucket is created by default in the region (us-east-1).","","    :param bucket_name: Bucket to create","    :param region: String region to create bucket in, e.g., 'us-west-2'","    :return: True if bucket created, else False","    \"\"\"","","    # Create bucket","    try:","        if region is None:","            s3_client = boto3.client('s3')","            s3_client.create_bucket(Bucket=bucket_name)","        else:","            s3_client = boto3.client('s3', region_name=region)","            location = {'LocationConstraint': region}","            s3_client.create_bucket(Bucket=bucket_name,","                                    CreateBucketConfiguration=location)","    except ClientError as e:","        logging.error(e)","        return False","    return True","    ","    ","","def list_buckets():","    # Retrieve the list of existing buckets","    s3_client = boto3.client('s3')","    response = s3_client.list_buckets()","","    # Output the bucket names","    print('Existing buckets:')","    for bucket in response['Buckets']:","        print('\\t', bucket[\"Name\"])","    ","    ","def upload_file(file_name, bucket, object_key=None):","    \"\"\"Upload a file to an S3 bucket","","    :param file_name: File to upload","    :param bucket: Bucket to upload to","    :param key: S3 object key. If not specified then file_name is used","    :return: True if file was uploaded, else False","    \"\"\"","","    # If S3 key was not specified, use file_name","    if object_key is None:","        object_key = file_name","","    # Upload the file","    s3_client = boto3.client('s3')","    try:","        response = s3_client.upload_file(file_name, bucket, object_key)","        '''","        # an example of using the ExtraArgs optional parameter to set the ACL (access control list) value 'public-read' to the S3 object","        response = s3_client.upload_file(file_name, bucket, key, ","            ExtraArgs={'ACL': 'public-read'})","        '''","        ","    except ClientError as e:","        logging.error(e)","        return False","    return True","    ","    ","    ","def delete_object(region, bucket_name, object_key):","    \"\"\"Delete a given object from an S3 bucket","    \"\"\"","    s3_client = boto3.client('s3')","    response = s3_client.delete_object(Bucket=bucket_name, Key=object_key)","    ","","","def delete_bucket(region, bucket_name):","    \"\"\"Delete a given S3 bucket","    \"\"\"","    s3_client = boto3.client('s3')","  ","    # first delete all the objects from a bucket, if any objects exist","    response = s3_client.list_objects_v2(Bucket=bucket_name)","    if response['KeyCount'] != 0:","          for content in response['Contents']:","            object_key = content['Key']","            print('\\t Deleting object...', object_key)","            s3_client.delete_object(Bucket=bucket_name, Key=object_key)","","","    # delete the bucket","    print('\\t Deleting bucket...', bucket_name)","    response = s3_client.delete_bucket(Bucket=bucket_name)","  ","    list_buckets()","  "," "," "," ","    ","def main():","    import argparse","    parser = argparse.ArgumentParser()","    parser.add_argument('bucket_name', help='The name of the bucket.')","    parser.add_argument('--file_name', help='The name of the file to upload.')","    parser.add_argument('--object_key', help='The object key')","","    region = 'us-east-1'","  ","    args = parser.parse_args()","    create_bucket(args.bucket_name)","    #list_buckets()","    ","    ","    #upload_file(args.file_name,args.bucket_name, args.object_key)","    #delete_object(region, args.bucket_name, args.object_key)","    #delete_bucket(region, args.bucket_name)"," "," ","","if __name__ == '__main__':"," main()"],"id":1}],[{"start":{"row":104,"column":0},"end":{"row":104,"column":1},"action":"remove","lines":[" "],"id":2}],[{"start":{"row":104,"column":0},"end":{"row":105,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":105,"column":0},"end":{"row":113,"column":17},"action":"insert","lines":["def download_file(file_name, bucket):","    \"\"\"","    Function to download a given file from an S3 bucket","    \"\"\"","    s3 = boto3.resource('s3')","    output = f\"downloads/{file_name}\"","    s3.Bucket(bucket).download_file(file_name, output)","","    return output"],"id":4}]]},"ace":{"folds":[],"scrolltop":1417,"scrollleft":0,"selection":{"start":{"row":112,"column":0},"end":{"row":112,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":122,"state":"start","mode":"ace/mode/python"}},"timestamp":1639574443566}